{"version":3,"sources":["components/Post.js","App.js","reportWebVitals.js","index.js"],"names":["Post","props","imgUrl","summary","href","shortUrl","className","src","alt","App","getImageUrl","post","imgObj","content","find","contents","type","media","url","getPost","Name","pageNumber","a","setError","error","setLogin","login","blogName","accessOriginalPosts","originalPosts","setProfilePic","profPicUrl","headers","accept","authorization","fetch","res","json","data","status","errors","err","code","response","posts","length","blog","avatar","trail","originalPost","concat","useState","setBlogName","class","onKeyPress","e","key","spellcheck","placeholder","name","id","onChange","target","value","required","for","onClick","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.306ed860.chunk.js","sourcesContent":["import React from 'react';\nimport './Post.css';\n\nfunction Post(props) {\n    // different render for posts with image info\n    if (props.imgUrl && props.summary) {\n        return (\n            <a href={props.shortUrl}>\n                <div className=\"original-post bottom-padded\">\n                    <img className=\"original-post-image\" src={props.imgUrl} alt='tumblr post preview' />\n                    <div className=\"original-post-text\">{props.summary}</div>\n                </div>\n            </a>\n        );\n    }\n    \n    // only img data\n    if (props.imgUrl) {\n        return (\n            <a href={props.shortUrl}>\n                <div className=\"original-post image-height\">\n                    <img className=\"original-post-image\" src={props.imgUrl} alt='tumblr post preview' />\n                </div>\n            </a>\n        );\n    }\n\n    // default render\n    return (\n        <a href={props.shortUrl}>\n            <div className=\"original-post bottom-padded original-post-text\">{props.summary}</div>\n        </a>\n    );\n\n}\n\nexport default Post;","import { useState } from 'react';\nimport Post from './components/Post';\nimport './App.css';\n\nfunction App() {\n\n  function getImageUrl(post) {\n    const imgObj = post.content.find(contents => {\n      return contents.type && contents.type === \"image\";\n    })\n    // apparently the first img in the array is unadulterated\n    if (imgObj) return imgObj.media[0].url;\n    return false;\n  }\n\n  async function getPost(Name, pageNumber) {\n    setError(error = false);\n    setLogin(login = false);\n    let url;\n    url = `https://api.tumblr.com/v2/blog/${blogName}/posts?offset=${pageNumber * 20}`;\n    if (!pageNumber) {\n      url = `https://api.tumblr.com/v2/blog/${blogName}/posts`;\n      accessOriginalPosts(originalPosts = []);\n      setProfilePic(profPicUrl = \"\");\n\n    }\n    const headers = {\n      accept: 'application/json;format=camelcase',\n      authorization: 'Bearer aIcXSOoTtqrzR8L8YEIOmBeW94c3FmbSNSWAUbxsny9KKx5VFh'\n    }\n    const res = await fetch(url, { headers });\n    const data = await res.json();\n\n    if (res.status !== 200) {\n      // (data.errors && data.errors[0].code === 4012) ? setLogin(login = true): setError(error = true);\n      (data.errors && data.errors.find(err => err.code === 4012)) ? setLogin(login = true): setError(error = true);\n      // setError(error = true);\n      accessOriginalPosts(originalPosts = []);\n    }\n\n    // process data\n    if (res.status === 200 && data.response.posts.length) {\n      if (!pageNumber) {\n        setProfilePic(profPicUrl = data.response.blog.avatar[0].url);\n      }\n\n      for (let post of data.response.posts) {\n        // no trail === original post\n        if (!post.trail.length) {\n          const imgUrl = getImageUrl(post);\n          const originalPost = {\n            summary: post.summary,\n            shortUrl: post.shortUrl\n          }\n          if (imgUrl) originalPost.imgUrl = imgUrl;\n          accessOriginalPosts(originalPosts = originalPosts.concat([originalPost]));\n        }\n      }\n\n      // recursively call to continue getting posts\n      getPost(blogName, pageNumber + 1);\n    }\n  }\n\n  let [originalPosts, accessOriginalPosts] = useState([]);\n  let [blogName, setBlogName] = useState('');\n  let [error, setError] = useState(false);\n  let [login, setLogin] = useState(false);\n  let [profPicUrl, setProfilePic] = useState('');\n\n  function handleKeyPress(event) {\n    if (event.key === 'Enter') getPost(blogName, 0);\n  }\n\n  return (\n    <body>\n      <div>\n        <div class=\"form__group field\" onKeyPress={(e) => handleKeyPress(e)}>\n          <input type=\"input\" class=\"form__field\" spellcheck=\"false\" placeholder=\"Blog Name\" name=\"name\" id='name' onChange={e => setBlogName(e.target.value)} required />\n          <label for=\"name\" class=\"form__label\">Blog Name</label>\n          <button type=\"submit\" className=\"blog-search-submit\" onClick={() => getPost(blogName, 0)}><img src=\"https://img.icons8.com/FFFFFF/search\"></img></button>\n        </div>\n        <span><img class=\"profile-picture\" src={profPicUrl}></img></span>\n      </div>\n      <div class=\"error\">\n        {error && <div className=\"error\">Error!  Blog not found!</div>}\n        {login && <div className=\"error\">Sorry!  Blogs requiring a login are not supported.</div>}\n        <div className=\"post-container\">\n          {\n            originalPosts.length ? (\n              originalPosts.map(post => {\n                return <Post summary={post.summary}\n                  shortUrl={post.shortUrl}\n                  imgUrl={post.imgUrl} />;\n              })\n            ) : (null)\n          }\n        </div>\n      </div>\n    </body>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}